// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/duo-labs/webauthn/webauthn"
	"github.com/hesusruiz/faster/ent/predicate"
	"github.com/hesusruiz/faster/ent/user"
	"github.com/hesusruiz/faster/ent/webauthncredential"
)

// WebauthnCredentialUpdate is the builder for updating WebauthnCredential entities.
type WebauthnCredentialUpdate struct {
	config
	hooks    []Hook
	mutation *WebauthnCredentialMutation
}

// Where appends a list predicates to the WebauthnCredentialUpdate builder.
func (wcu *WebauthnCredentialUpdate) Where(ps ...predicate.WebauthnCredential) *WebauthnCredentialUpdate {
	wcu.mutation.Where(ps...)
	return wcu
}

// SetUpdateTime sets the "update_time" field.
func (wcu *WebauthnCredentialUpdate) SetUpdateTime(t time.Time) *WebauthnCredentialUpdate {
	wcu.mutation.SetUpdateTime(t)
	return wcu
}

// SetCredential sets the "credential" field.
func (wcu *WebauthnCredentialUpdate) SetCredential(w webauthn.Credential) *WebauthnCredentialUpdate {
	wcu.mutation.SetCredential(w)
	return wcu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (wcu *WebauthnCredentialUpdate) SetUserID(id string) *WebauthnCredentialUpdate {
	wcu.mutation.SetUserID(id)
	return wcu
}

// SetUser sets the "user" edge to the User entity.
func (wcu *WebauthnCredentialUpdate) SetUser(u *User) *WebauthnCredentialUpdate {
	return wcu.SetUserID(u.ID)
}

// Mutation returns the WebauthnCredentialMutation object of the builder.
func (wcu *WebauthnCredentialUpdate) Mutation() *WebauthnCredentialMutation {
	return wcu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (wcu *WebauthnCredentialUpdate) ClearUser() *WebauthnCredentialUpdate {
	wcu.mutation.ClearUser()
	return wcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wcu *WebauthnCredentialUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	wcu.defaults()
	if len(wcu.hooks) == 0 {
		if err = wcu.check(); err != nil {
			return 0, err
		}
		affected, err = wcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WebauthnCredentialMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wcu.check(); err != nil {
				return 0, err
			}
			wcu.mutation = mutation
			affected, err = wcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(wcu.hooks) - 1; i >= 0; i-- {
			if wcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (wcu *WebauthnCredentialUpdate) SaveX(ctx context.Context) int {
	affected, err := wcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wcu *WebauthnCredentialUpdate) Exec(ctx context.Context) error {
	_, err := wcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcu *WebauthnCredentialUpdate) ExecX(ctx context.Context) {
	if err := wcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wcu *WebauthnCredentialUpdate) defaults() {
	if _, ok := wcu.mutation.UpdateTime(); !ok {
		v := webauthncredential.UpdateDefaultUpdateTime()
		wcu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wcu *WebauthnCredentialUpdate) check() error {
	if _, ok := wcu.mutation.UserID(); wcu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "WebauthnCredential.user"`)
	}
	return nil
}

func (wcu *WebauthnCredentialUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   webauthncredential.Table,
			Columns: webauthncredential.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: webauthncredential.FieldID,
			},
		},
	}
	if ps := wcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wcu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: webauthncredential.FieldUpdateTime,
		})
	}
	if value, ok := wcu.mutation.Credential(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: webauthncredential.FieldCredential,
		})
	}
	if wcu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webauthncredential.UserTable,
			Columns: []string{webauthncredential.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webauthncredential.UserTable,
			Columns: []string{webauthncredential.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{webauthncredential.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// WebauthnCredentialUpdateOne is the builder for updating a single WebauthnCredential entity.
type WebauthnCredentialUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WebauthnCredentialMutation
}

// SetUpdateTime sets the "update_time" field.
func (wcuo *WebauthnCredentialUpdateOne) SetUpdateTime(t time.Time) *WebauthnCredentialUpdateOne {
	wcuo.mutation.SetUpdateTime(t)
	return wcuo
}

// SetCredential sets the "credential" field.
func (wcuo *WebauthnCredentialUpdateOne) SetCredential(w webauthn.Credential) *WebauthnCredentialUpdateOne {
	wcuo.mutation.SetCredential(w)
	return wcuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (wcuo *WebauthnCredentialUpdateOne) SetUserID(id string) *WebauthnCredentialUpdateOne {
	wcuo.mutation.SetUserID(id)
	return wcuo
}

// SetUser sets the "user" edge to the User entity.
func (wcuo *WebauthnCredentialUpdateOne) SetUser(u *User) *WebauthnCredentialUpdateOne {
	return wcuo.SetUserID(u.ID)
}

// Mutation returns the WebauthnCredentialMutation object of the builder.
func (wcuo *WebauthnCredentialUpdateOne) Mutation() *WebauthnCredentialMutation {
	return wcuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (wcuo *WebauthnCredentialUpdateOne) ClearUser() *WebauthnCredentialUpdateOne {
	wcuo.mutation.ClearUser()
	return wcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wcuo *WebauthnCredentialUpdateOne) Select(field string, fields ...string) *WebauthnCredentialUpdateOne {
	wcuo.fields = append([]string{field}, fields...)
	return wcuo
}

// Save executes the query and returns the updated WebauthnCredential entity.
func (wcuo *WebauthnCredentialUpdateOne) Save(ctx context.Context) (*WebauthnCredential, error) {
	var (
		err  error
		node *WebauthnCredential
	)
	wcuo.defaults()
	if len(wcuo.hooks) == 0 {
		if err = wcuo.check(); err != nil {
			return nil, err
		}
		node, err = wcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WebauthnCredentialMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wcuo.check(); err != nil {
				return nil, err
			}
			wcuo.mutation = mutation
			node, err = wcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wcuo.hooks) - 1; i >= 0; i-- {
			if wcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wcuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, wcuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*WebauthnCredential)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from WebauthnCredentialMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (wcuo *WebauthnCredentialUpdateOne) SaveX(ctx context.Context) *WebauthnCredential {
	node, err := wcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wcuo *WebauthnCredentialUpdateOne) Exec(ctx context.Context) error {
	_, err := wcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcuo *WebauthnCredentialUpdateOne) ExecX(ctx context.Context) {
	if err := wcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wcuo *WebauthnCredentialUpdateOne) defaults() {
	if _, ok := wcuo.mutation.UpdateTime(); !ok {
		v := webauthncredential.UpdateDefaultUpdateTime()
		wcuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wcuo *WebauthnCredentialUpdateOne) check() error {
	if _, ok := wcuo.mutation.UserID(); wcuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "WebauthnCredential.user"`)
	}
	return nil
}

func (wcuo *WebauthnCredentialUpdateOne) sqlSave(ctx context.Context) (_node *WebauthnCredential, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   webauthncredential.Table,
			Columns: webauthncredential.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: webauthncredential.FieldID,
			},
		},
	}
	id, ok := wcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WebauthnCredential.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, webauthncredential.FieldID)
		for _, f := range fields {
			if !webauthncredential.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != webauthncredential.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wcuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: webauthncredential.FieldUpdateTime,
		})
	}
	if value, ok := wcuo.mutation.Credential(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: webauthncredential.FieldCredential,
		})
	}
	if wcuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webauthncredential.UserTable,
			Columns: []string{webauthncredential.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webauthncredential.UserTable,
			Columns: []string{webauthncredential.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WebauthnCredential{config: wcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{webauthncredential.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
